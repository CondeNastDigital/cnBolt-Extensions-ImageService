{"version":3,"file":"scribe-plugin-link-prompt-command.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA,ADcA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../src/checks.js","../src/init.js","../src/prompts.js","../src/transforms.js","../src/scribe-plugin-link-prompt-command.js"],"sourcesContent":["define('checks',[], function () {\n\n  'use strict';\n\n  var urlProtocolRegExp = /^https?\\:\\/\\//;\n  var mailtoProtocolRegExp = /^mailto\\:/;\n  var telProtocolRegExp = /^tel\\:/;\n\n  var knownProtocols = [urlProtocolRegExp, mailtoProtocolRegExp, telProtocolRegExp];\n\n  function emptyLink(string) {\n    return /\\w/.test(string);\n  }\n\n  function hasKnownProtocol(urlValue) {\n    // If a http/s or mailto link is provided, then we will trust that an link is valid\n    return knownProtocols.some(function(protocol) { return protocol.test(urlValue)});\n  }\n\n  return {\n    emptyLink: emptyLink,\n    hasKnownProtocol: hasKnownProtocol\n  };\n});\n\n","define('init',[], function () {\n\n  function init(options) {\n    var options = options || {};\n\n    if(!options.transforms) {\n      options.transforms = {};\n    }\n\n    ['pre', 'post'].forEach(function(key) {\n      if(!options.transforms[key]) {\n        options.transforms[key] = [];\n      }\n    });\n\n    return options;\n  }\n\n  return {\n    init: init\n  }\n});\n\n","define('prompts',[], function() {\n\n  var userPrompts = [\n    {\n      // For emails we just look for a `@` symbol as it is easier.\n      regexp: /@/,\n      message: 'The URL you entered appears to be an email address. ' +\n      'Do you want to add the required “mailto:” prefix?',\n      action: function(link) {\n        return 'mailto:' + link;\n      }\n    },\n    {\n      // For tel numbers check for + and numerical values\n      regexp: /\\+?\\d+/,\n      message: 'The URL you entered appears to be a telephone number. ' +\n                'Do you want to add the required “tel:” prefix?',\n      action: function(link) {\n        return 'tel:' + link;\n      }\n    },\n    {\n      regexp: /.+/,\n      message: 'The URL you entered appears to be a link. ' +\n                'Do you want to add the required “http://” prefix?',\n      action: function(link) {\n        return 'http://' + link;\n      }\n    }\n  ];\n\n  function process(window, link) {\n    for (var i = 0; i < userPrompts.length; i++) {\n      var prompt = userPrompts[i];\n\n      if(prompt.regexp.test(link)) {\n        var userResponse = window.confirm(prompt.message);\n\n        if(userResponse) {\n          // Only process the first prompt\n          return prompt.action(link);\n        }\n      }\n\n    };\n\n    return link;\n  }\n\n  return {\n    process: process\n  }\n\n});\n\n","define('transforms',[], function () {\n\n\n  function run(transforms, initialLink) {\n    return transforms.reduce(function(currentLinkValue, transform) {\n      return transform(currentLinkValue);\n      }, initialLink);\n  }\n\n  return {\n    run: run\n  }\n});\n\n","\ndefine('scribe-plugin-link-prompt-command',['./checks',\n  './init',\n  './prompts',\n  './transforms'], function (checks, init, prompts, transforms) {\n\n\n  /**\n   * This plugin adds a command for creating links, including a basic prompt.\n   */\n\n  'use strict';\n\n  return function (options) {\n    var options = init.init(options);\n\n    return function (scribe) {\n      var linkPromptCommand = new scribe.api.Command('createLink');\n\n      linkPromptCommand.nodeName = 'A';\n\n      linkPromptCommand.execute = function (passedLink) {\n        var link;\n        var selection = new scribe.api.Selection();\n        var range = selection.range;\n        var anchorNode = selection.getContaining(function (node) {\n          return node.nodeName === this.nodeName;\n        }.bind(this));\n\n        var initialLink = anchorNode ? anchorNode.href : '';\n\n        if (!passedLink)  {\n          link = window.prompt('Enter a link.', initialLink);\n        } else {\n          link = passedLink;\n        }\n\n        link = transforms.run(options.transforms.pre, link);\n\n        if(!checks.emptyLink(link)) {\n          window.alert('This link appears empty');\n          return;\n        }\n\n        if(options && options.validation) {\n          var validationResult = options.validation(link);\n\n          if(!validationResult.valid) {\n            window.alert(validationResult.message || 'The link is not valid');\n            return;\n          }\n        }\n\n        if (anchorNode) {\n          range.selectNode(anchorNode);\n          selection.selection.removeAllRanges();\n          selection.selection.addRange(range);\n        }\n\n        if (link) {\n\n          if (! checks.hasKnownProtocol(link) ) {\n            link = prompts.process(window, link);\n          }\n\n          link = transforms.run(options.transforms.post, link);\n\n          scribe.api.SimpleCommand.prototype.execute.call(this, link);\n        }\n      };\n\n      linkPromptCommand.queryState = function () {\n        /**\n         * We override the native `document.queryCommandState` for links because\n         * the `createLink` and `unlink` commands are not supported.\n         * As per: http://jsbin.com/OCiJUZO/1/edit?js,console,output\n         */\n        var selection = new scribe.api.Selection();\n        return !! selection.getContaining(function (node) {\n          return node.nodeName === this.nodeName;\n        }.bind(this));\n      };\n\n      scribe.commands.linkPrompt = linkPromptCommand;\n    };\n  };\n\n});\n\n"],"names":[]}