{"version":3,"file":"scribe-plugin-toolbar.min.js","mappings":"AAAA,AAAAA,OAAA,2BAAA,WAEA,YAEA,IAAAC,GAAA,IAEA,OAAA,UAAAC,EAAAC,GAEA,GAAAC,IACAC,QAAA,EASA,OANAF,KACAA,EAAAC,GAGAD,EAAAG,OAAAC,OAAAJ,GAEA,SAAAK,GAEAL,EAAAE,QACAG,EAAAC,GAAAC,iBAAA,QAAA,WACAT,EAAAO,EAAAC,IAIA,IAAAE,GAAAT,EAAAU,iBAAA,sBAEAC,OAAAC,UAAAC,QAAAC,KAAAL,EAAA,SAAAM,GAqCA,QAAAC,KAEA,GAAAC,GAAAX,EAAAY,WAAAH,EAAAI,QAAAC,aAEAC,EAAA,GAAAf,GAAAgB,IAAAC,SAGAF,GAAAG,OAAAP,EAAAQ,WAAAV,EAAAI,QAAAO,cACAX,EAAAY,UAAAC,IAAA,UAEAb,EAAAY,UAAAE,OAAA,UAGAR,EAAAG,OAAAP,EAAAa,eACAf,EAAAgB,gBAAA,YAEAhB,EAAAiB,aAAA,WAAA,YApDAjB,EAAAP,iBAAA,YAAA,WACA,IAAAP,EAAAE,QAAAG,EAAAC,KAAAR,EAAA,CAKA,GAAAkB,GAAAX,EAAAY,WAAAH,EAAAI,QAAAC,YASAd,GAAAC,GAAA0B,QACAhB,EAAAiB,QAAAnB,EAAAI,QAAAO,iBAUApB,EAAAC,GAAAC,iBAAA,QAAAQ,GACAV,EAAAC,GAAAC,iBAAA,UAAAQ,GAEAV,EAAAC,GAAAC,iBAAA,QAAAQ,GACAV,EAAAC,GAAAC,iBAAA,OAAAQ,GAIAV,EAAA6B,GAAA,kBAAAnB;AA9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../src/scribe-plugin-toolbar.js"],"sourcesContent":["define('scribe-plugin-toolbar',[],function () {\n\n  'use strict';\n\n  var focusedElement = null;\n\n  return function (toolbarNode, options) {\n\n    var defaultOptions = {\n      shared: false\n    };\n\n    if(!options) {\n      options = defaultOptions;\n    }\n\n    options = Object.freeze(options);\n\n    return function (scribe) {\n\n      if(options.shared) {\n        scribe.el.addEventListener('focus', function() {\n          focusedElement = scribe.el;\n        });\n      }\n\n      var buttons = toolbarNode.querySelectorAll('[data-command-name]');\n\n      Array.prototype.forEach.call(buttons, function (button) {\n        button.addEventListener('mousedown', function () {\n          if (options.shared && (scribe.el !== focusedElement)) {\n            return;\n          }\n\n          // Look for a predefined command.\n          var command = scribe.getCommand(button.dataset.commandName);\n\n          /**\n           * Focus will have been taken away from the Scribe instance when\n           * clicking on a button (Chrome will return the focus automatically\n           * but only if the selection is not collapsed. As per: http://jsbin.com/tupaj/1/edit?html,js,output).\n           * It is important that we focus the instance again before executing\n           * the command, because it might rely on selection data.\n           */\n          scribe.el.focus();\n          command.execute(button.dataset.commandValue);\n          /**\n           * Chrome has a bit of magic to re-focus the `contenteditable` when a\n           * command is executed.\n           * As per: http://jsbin.com/papi/1/edit?html,js,output\n           */\n        });\n\n        // Keep the state of toolbar buttons in sync with the current selection.\n        // Unfortunately, there is no `selectionchange` event.\n        scribe.el.addEventListener('keyup', updateUi);\n        scribe.el.addEventListener('mouseup', updateUi);\n\n        scribe.el.addEventListener('focus', updateUi);\n        scribe.el.addEventListener('blur', updateUi);\n\n        // We also want to update the UI whenever the content changes. This\n        // could be when one of the toolbar buttons is actioned.\n        scribe.on('content-changed', updateUi);\n\n        function updateUi() {\n          // Look for a predefined command.\n          var command = scribe.getCommand(button.dataset.commandName);\n\n          var selection = new scribe.api.Selection();\n\n          // TODO: Do we need to check for the selection?\n          if (selection.range && command.queryState(button.dataset.commandValue)) {\n            button.classList.add('active');\n          } else {\n            button.classList.remove('active');\n          }\n\n          if (selection.range && command.queryEnabled()) {\n            button.removeAttribute('disabled');\n          } else {\n            button.setAttribute('disabled', 'disabled');\n          }\n        }\n      });\n    };\n  };\n\n});\n\n"],"names":["define","focusedElement","toolbarNode","options","defaultOptions","shared","Object","freeze","scribe","el","addEventListener","buttons","querySelectorAll","Array","prototype","forEach","call","button","updateUi","command","getCommand","dataset","commandName","selection","api","Selection","range","queryState","commandValue","classList","add","remove","queryEnabled","removeAttribute","setAttribute","focus","execute","on"]}