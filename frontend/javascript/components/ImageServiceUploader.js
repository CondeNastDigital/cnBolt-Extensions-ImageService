define(function () {

    /**
     * Component that generates an upload button, for adding new images
     * @param data {Object}
     * @param data.config {Object} System configurations
     * @param data.config.events {Object} Event names that the component fires
     * @param data.config.labels {Object} Labels that the component uses
     * @param data.factory {Object} Collection of factories that the component needs
     * @param data.factory.model {Object} Factory for the DataModel used by all other components
     * @param data.host {Object} The place where the componenet adds its HTML and fires the events MESSAGEERROR, ITEMADDED
     * @param data.maxFileSize {Integer} The max file size allowed
     * @param data.allowedExtensions {Array} The set of allowed file extensions
     */
    return function(data) {
        var that = this;
        var Events = data.config.events;
        var Model = data.factory.model;
        var Labels = data.config.labels;

        /**
         * jQuery object which hosts all new elements generated by the Item Service
         * @type {jQuery|HTMLElement}
         */
        var host = data.host;

        /**
         * jQuery Object holding the upload field and all additional help elements if needed
         * @type {null}
         */
        var container = null;

        /**
         * the jQuery Upload Field
         * @type {null}
         */
        var uploadField = null;

        /**
         * The max filesize
         * @type {string|*|string|number}
         */
        var maxFileSize = data.maxFileSize || null;

        /**
         * Allowed extensions
         * @type {*|string[]}
         */
        var allowedExtensions = data.allowedExtensions || ['jpg', 'jpeg', 'png', 'gif'];

        /**
         * Class initialisation
         */
        that.init = function () {
            var uploadElement = that.render();
            host.append(uploadElement);
        };

        /**
         * File Validation checks the size and extension of the file
         * @param file
         * @returns {boolean}
         */
        that.validateFile = function (file) {

            if (!file)
                return true;

            if (maxFileSize && file.size > maxFileSize) {
                container.trigger(Events.MESSAGEERROR, 'File size too big ' + file.size + ' File: ' + file.name);
                return false;
            } else if (allowedExtensions.indexOf(file.type.replace('image/', '')) < 0) {
                container.trigger(Events.MESSAGEERROR, 'File type not known ' + file.type + ' File: ' + file.name);
                return false;
            } else {
                return true;
            }
        };

        /**
         * File processing - validates and triggers an ITEMADDED event
         * @param file
         */
        that.processFile = function (file) {

            if (!that.validateFile(file))
                return;

            var name = file.name;

            // Creates a copy of the Item model, as javascript only works with pointers.
            var newImage = Model.create({
                id: name,
                info: {
                    source: null,
                    height: null,
                    width: null,
                    size: file.size,
                    format: file.type
                }
            });

            // The host is used as Events controller
            host.trigger(Events.ITEMADDED, {
                item: newImage,
                file: file
            });

        };

        /**
         * Adds another upload field for multi-upload
         * @param element
         */
        that.addFieldListener = function (element) {
            element.on('change', function () {
                var filesCount = uploadField[0].files.length;

                for (var i = 0; i < filesCount; i++) {
                    that.processFile(uploadField[0].files[i]);
                }

                $(this).val(null);

                // Resets the Upload field
                //that.render();
            });
        };

        /**
         * Adds another upload field
         */
        that.addUploadField = function () {
            uploadField = $('<input name="files[]" type="file" multiple/>');
            that.addFieldListener(uploadField);
            container.append(uploadField);
        };

        /**
         * Renders the Upload container
         * @returns {*}
         */
        that.render = function () {

            container = $('<span class="btn btn-primary fileinput-button"><i class="fa fa-plus"></i><span> ' + Labels.button.itemUpload + ' </span></span>');
            that.addUploadField();
            return $('<div class="imageservice-uploader col-xs-12 col-md-2"></div>').append(container);
        };

        this.init();
    }
});